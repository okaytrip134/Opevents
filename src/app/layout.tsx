// app/layout.tsx
import type { Metadata } from "next";
import { ReactNode } from "react";
import "./globals.css";
import Navbar from "@/component/Navbar";
import LenisProvider from "@/component/LenisProvider";

export const metadata: Metadata = {
  title: "Eventer",
  description: "Generated by create next app",
};

export default function RootLayout({ children }: { children: ReactNode }) {
  const cleanScript = `
    (function () {
      try {
        const attrsToRemove = ['cz-shortcut-listen', 'data-gramm', 'data-gramm_id', 'data-gramm_editor', 'data-gramm_checked'];

        function removeAttrs(root) {
          if (!root) return;
          attrsToRemove.forEach(a => {
            if (root.hasAttribute && root.hasAttribute(a)) {
              root.removeAttribute(a);
            }
          });
        }

        removeAttrs(document.documentElement);
        removeAttrs(document.body);

        attrsToRemove.forEach(attr => {
          const nodes = document.querySelectorAll('[' + attr + ']');
          nodes.forEach(n => n.removeAttribute(attr));
        });

        const observer = new MutationObserver((mutations) => {
          for (let m of mutations) {
            if (m.type === 'attributes') {
              const target = m.target;
              attrsToRemove.forEach(a => {
                if (target && (target.hasAttribute && target.hasAttribute(a))) {
                  try { target.removeAttribute(a); } catch(e) {}
                }
              });
            } else if (m.type === 'childList') {
              m.addedNodes.forEach(node => {
                if (node && node.querySelectorAll) {
                  attrsToRemove.forEach(attr => {
                    node.querySelectorAll('[' + attr + ']').forEach(n => n.removeAttribute(attr));
                  });
                }
              });
            }
          }
        });

        observer.observe(document, { attributes: true, subtree: true, childList: true });
        setTimeout(() => observer.disconnect(), 5000);
      } catch (e) { /* fail silently */ }
    })();
  `;

  return (
    <html lang="en">
      <body>
        {/* Fix unwanted injected attributes before hydration */}
        <script id="hydration-fix" dangerouslySetInnerHTML={{ __html: cleanScript }} />
        <LenisProvider>
          <Navbar />
          {children}
        </LenisProvider>
      </body>
    </html>
  );
}
